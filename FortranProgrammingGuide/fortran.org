#+AUTHOR: Jacob Zeyu LIU (liuzeyu271828@gmail.com)

* Fortran Programming Guide

This document contains principles of the author on Fortran programming language.
The document is divided into three parts: the guiding ideology, the compiling
criteria, and the coding standards.

** The Guiding Ideology

*** Anything implicit is forbidden

Due to historical reasons, there are so many obsolete /implicitors/ in the
language Fortran. Old code use variables implicitly, F90 code call subroutines
implicitly, and arrays with undetermined length appear all around the community.
It is the response of this generation of coder to specify the coding style of 
modern Fortran, so anything implicit mentioned above are forbidden.

*** New data structures should be applied

Derived data type is the modern weapon of Fortran, and the code benefits so
much with derived data type in conciseness and readability. More importantly,
the Fortran 2003 standard with methods embedded in types is a best way of
tuning old FORTRAN to modern OOP type language.

However, there are some shortcomings of OOP where attention should be paid.
OOP commonly leads to a much too complicated data structure with redundant
inheritance. Data encapsulation simplifies the management of data in code logic
but aggravates the burden of managing data structure itself, so once the
burden of managing data structure increases too much, data encapsulation
becomes less worthwhile.

Taking the design of derived data type, ~denseMatrix~, for example, 
it seems a good practice to
design an abstract type ~Matrix~ first and then create extended derived data
types such as ~denseMatrix~, ~bandMatrix~, and ~sparseMatrix~, 
but this is redundant in fact. The three kinds of matrices differ a
lot in storage structure of attributes. More importantly, there are actually
only three kinds of matrix all around there, not even a fourth kind, so one
can just implement the three one by one, which leads to great flexibility and
much less data dependency.

*** Make proper choice on data encapsulation

Data encapsulation is very important in modern programming languages since it
provides another layer of abstraction to make programming easier with less
bugs, but there are choices to be made.

There two basic method of data encapsulation in Fortran: module in Fortran 95
and class in Fortran 2003. The second method is similar to C++, and is standard
OOP way of life, while the first method is special in Fortran, and it is
something just between OOP and non-OOP. In a word, Fortran provides a flexible
system of data encapsulation, users should make choices with wisdom.

One heuristic principle on choosing data encapsulation method is that class
should be utilized on very basic mathematical concepts such as matrix and
module should be considered while 'higher level' mathematical concepts such as
nonlinear equation solving. The reason beneath such principle is that matrices 
are used many times without being able to be predicted, while solving nonlinear
equations is task that will happen in a handful of times.

*** Interface should be unified and concise

The older the FORTRAN is, the more the parameter of a single call. In modern
Fortran with advanced data type, much information is kept in objects instead
of traditional variables, so concise interface is feasible.

One important aspect of designing a programming framework is unity. A unit
design of interfaces is both convenient for users and developers. It is
fruitful to create Fortran INTERFACE to unify the similar subroutines.

*** Functional Programming

Though Fortran is not LISP, the spirit of functional programming is beneficial.
By avoiding the side effects of procedures, the code get more robust. In this
project, all functions are not allowed to have side effects. Class methods such
as ~vec.pop()~ in C++ are set to subroutines.

** The Compiling Criteria

*** Use double precision as default real type

On modern PC, double precision is as fast as single precision, so the default
real type should be double precision. So parameter =-fdefault-real-8= should
be added while compiling with gfortran, and =-autodouble= should be added while
compiling with ifort, then all the numbers in code can be written without
the ugly letter 'd'.

Another method is using form ~1.23_wp~ as ~wp~ is defined as the working
precision. In program body, all magic numbers are avoided, which keeps 
consistency of code.

** The Coding Conventions

*** Comments

There are four levels of comments:
- Header :: This part contains the development information including
  the name of the author, the purpose of the whole source file, etc.
- Code component illustrator :: This part is located on top of all lines
  of a module, subroutine, or function, and just below the declaration line.
  This part contains the illustration of the component and its parameters.
  Each line explaining the behavior of the component is started without
  '> ', and each line explaining the parameters should be in the form
  of '>@ param[in/out] /name/ /illustration/'
- Code piece :: This part is at the top of one particular piece of code in
  main program or code component, just for explaining, and no '> ' is
  required. 
- Inline :: This part is attached at the end of a line of code.
- Tail (optional) :: Contains the version control information if version control
  system is not available

*** Variable Name

After some trials and errors, I will prefer CamelCase to underscores as the
practice of compound word in variable name.
+ Variable :: lowerCamalCase
+ Module :: lowerCamalCase
+ Subroutine :: lowerCamalCase
+ Function :: lowerCamalCase
+ Constant :: UPPER_CASE
+ Macros :: UPPER_CASE
+ Derived Data Type :: UpperCamelCase

*** Names in Module
    
Rule of the thumb: constrain the naming of the code with form of OOP code of
C++ to manage the namespace properly.

*** Conventions on Specific Naming and Spacing

- The attributive part of name must be the zeroth part.
- The attributive should be abbreviation instead of full spelling.
- Examples of attributives: ~semi~, ~full~, ~tmp~, ~loc~, ~rmt~.
- Blank lines are required between two blocks of code.
- Function and subroutines should be in the form of ~xxXxxXxx( xx, xx )~.
- Programming instructions should be in the form of ~xx ( xx, xx, xx )~.
